/*
	Copyright 2019 flyinghead

	This file is part of reicast.

    reicast is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 2 of the License, or
    (at your option) any later version.

    reicast is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with reicast.  If not, see <https://www.gnu.org/licenses/>.
 */
#include "gui_util.h"
#include <string>
#include <vector>
#include <algorithm>
#include <cstdlib>

#include "types.h"
#include "stdclass.h"
#include "oslib/directory.h"
#include "imgui/imgui.h"
#include "imgui/imgui_internal.h"

static std::string select_current_directory;
static std::vector<std::string> subfolders;
static std::vector<std::string> folderFiles;
bool subfolders_read;
#ifdef _WIN32
static const std::string separators = "/\\";
static const std::string native_separator = "\\";
#else
static const std::string separators = "/";
static const std::string native_separator = "/";
#endif
#define PSEUDO_ROOT ":"

void select_file_popup(const char *prompt, StringCallback callback,
		bool selectFile, const std::string& selectExtension)
{
	if (select_current_directory.empty())
	{
#if defined(__ANDROID__)
		const char *home = getenv("REICAST_HOME");
		if (home != NULL)
		{
			const char *pcolon = strchr(home, ':');
			if (pcolon != NULL)
				select_current_directory = std::string(home, pcolon - home);
			else
				select_current_directory = home;
		}
#elif defined(__unix__) || defined(__APPLE__)
		const char *home = getenv("HOME");
		if (home != NULL)
			select_current_directory = home;
#elif defined(_WIN32)
		if (getenv("HOMEPATH") != NULL)
		{
			const char *home_drive = getenv("HOMEDRIVE");
			if (home_drive != NULL)
				select_current_directory = home_drive;
			select_current_directory += getenv("HOMEPATH");
		}
#endif
		if (select_current_directory.empty())
		{
			select_current_directory = get_writable_config_path("");
			if (select_current_directory.empty())
				select_current_directory = ".";
		}
	}

	ImGui::SetNextWindowPos(ImVec2(0, 0));
	ImGui::SetNextWindowSize(ImGui::GetIO().DisplaySize);
	ImGui::PushStyleVar(ImGuiStyleVar_WindowRounding, 0);

	if (ImGui::BeginPopupModal(prompt, NULL, ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoResize ))
	{
		std::string path = select_current_directory;
		std::string::size_type last_sep = path.find_last_of(separators);
		if (last_sep == path.size() - 1)
			path.pop_back();

		static std::string error_message;

		if (!subfolders_read)
		{
			subfolders.clear();
            folderFiles.clear();
			error_message.clear();
#ifdef _WIN32
			if (select_current_directory == PSEUDO_ROOT)
			{
				error_message = "Drives";
				// List all the drives
				u32 drives = GetLogicalDrives();
				for (int i = 0; i < 32; i++)
					if ((drives & (1 << i)) != 0)
						subfolders.push_back(std::string(1, (char)('A' + i)) + ":\\");
			}
			else
#elif __ANDROID__
			if (select_current_directory == PSEUDO_ROOT)
			{
				error_message = "Storage Locations";
				const char *home = getenv("REICAST_HOME");
				while (home != NULL)
				{
					const char *pcolon = strchr(home, ':');
					if (pcolon != NULL)
					{
						subfolders.push_back(std::string(home, pcolon - home));
						home = pcolon + 1;
					}
					else
					{
						subfolders.push_back(home);
						home = NULL;
					}
				}
			}
			else
#endif
			{
				DIR *dir = flycast::opendir(select_current_directory.c_str());
				if (dir == NULL)
				{
					error_message = "Cannot read " + select_current_directory;
					subfolders.emplace_back("..");
				}
				else
				{
					bool dotdot_seen = false;
					while (true)
					{
						struct dirent *entry = flycast::readdir(dir);
						if (entry == NULL)
							break;
						std::string name(entry->d_name);
#ifdef __APPLE__
                        extern std::string os_PrecomposedString(std::string string);
                        name = os_PrecomposedString(name);
#endif
						if (name == ".")
							continue;
						std::string child_path = path + "/" + name;
						bool is_dir = false;
#ifndef _WIN32
						if (entry->d_type == DT_DIR)
							is_dir = true;
						if (entry->d_type == DT_UNKNOWN || entry->d_type == DT_LNK)
#endif
						{
							struct stat st;
							if (flycast::stat(child_path.c_str(), &st) != 0)
								continue;
							if (S_ISDIR(st.st_mode))
								is_dir = true;
						}
						if (is_dir && flycast::access(child_path.c_str(), R_OK) == 0)
						{
							if (name == "..")
								dotdot_seen = true;
							subfolders.push_back(name);
						}
                        else
                        {
                            std::string extension = get_file_extension(name);
                            if (selectFile)
                            {
                            	if (extension == selectExtension)
									folderFiles.push_back(name);
                            }
                            else if (extension == "zip" || extension == "7z" || extension == "chd"
                            		|| extension == "gdi" || extension == "cdi" || extension == "cue"
                            		|| (!config::HideLegacyNaomiRoms
                            				&& (extension == "bin" || extension == "lst" || extension == "dat")))
                            	folderFiles.push_back(name);
                        }
					}
					flycast::closedir(dir);
#if defined(_WIN32) || defined(__ANDROID__)
					if (!dotdot_seen)
						subfolders.emplace_back("..");
#else
					(void)dotdot_seen;
#endif
				}
			}

			std::stable_sort(subfolders.begin(), subfolders.end());
			std::stable_sort(folderFiles.begin(), folderFiles.end());
			subfolders_read = true;
		}

		ImGui::Text("%s", error_message.empty() ? select_current_directory.c_str() : error_message.c_str());
		ImGui::BeginChild(ImGui::GetID("dir_list"), ImVec2(0, - 30 * gui_get_scaling() - ImGui::GetStyle().ItemSpacing.y), true);

		ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(8 * gui_get_scaling(), 20 * gui_get_scaling()));		// from 8, 4


		for (const auto& name : subfolders)
		{
			std::string child_path;
			if (name == "..")
			{
				std::string::size_type last_sep = path.find_last_of(separators);
				if (last_sep == std::string::npos)
				{
					if (path.empty())
						// Root folder
						continue;
#ifdef _WIN32
					if (path.size() == 2 && path[1] == ':')
						child_path = PSEUDO_ROOT;
					else
#endif
					if (path == ".")
						child_path = "..";
					else if (path == "..")
						child_path = ".." + native_separator + "..";
					else
						child_path = ".";
				}
				else if (last_sep == 0)
					child_path = native_separator;
				else if (path.size() >= 2 && path.substr(path.size() - 2) == "..")
					child_path = path + native_separator + "..";
				else
				{
					child_path = path.substr(0, last_sep);
#ifdef _WIN32
					if (child_path.size() == 2 && child_path[1] == ':')		// C: -> C:/
						child_path += native_separator;
#endif
				}
#ifdef __ANDROID__
				if (access(child_path.c_str(), R_OK) != 0)
					child_path = PSEUDO_ROOT;
#endif
			}
			else
			{
#if defined(_WIN32) || defined(__ANDROID__)
				if (path == PSEUDO_ROOT)
					child_path = name;
				else
#endif
					child_path = path + native_separator + name;
			}
			if (ImGui::Selectable(name.c_str()))
			{
				subfolders_read = false;
				select_current_directory = child_path;
			}
		}
        ImGui::PushStyleColor(ImGuiCol_Text, { 1, 1, 1, selectFile ? 1.f : 0.3f });
        for (const auto& name : folderFiles)
        {
        	if (selectFile)
        	{
    			if (ImGui::Selectable(name.c_str()))
    			{
    				subfolders_read = false;
    				callback(false, select_current_directory + native_separator + name);
    				ImGui::CloseCurrentPopup();
    			}
        	}
        	else
        	{
        		ImGui::Text("%s", name.c_str());
        	}
        }
        ImGui::PopStyleColor();
        
		ImGui::PopStyleVar();
		ImGui::EndChild();
		if (!selectFile)
		{
			if (ImGui::Button("Select Current Directory", ImVec2(0, 30 * gui_get_scaling())))
			{
				subfolders_read = false;
				callback(false, select_current_directory);
				ImGui::CloseCurrentPopup();
			}
			ImGui::SameLine();
		}
		if (ImGui::Button("Cancel", ImVec2(0, 30 * gui_get_scaling())))
		{
			subfolders_read = false;
			callback(true, "");
			ImGui::CloseCurrentPopup();
		}

		ImGui::EndPopup();
	}
	ImGui::PopStyleVar();
}

// See https://github.com/ocornut/imgui/issues/3379
void ScrollWhenDraggingOnVoid(const ImVec2& delta, ImGuiMouseButton mouse_button)
{
    ImGuiContext& g = *ImGui::GetCurrentContext();
    ImGuiWindow* window = g.CurrentWindow;
    bool hovered = false;
    bool held = false;
    ImGuiButtonFlags button_flags = (mouse_button == 0) ? ImGuiButtonFlags_MouseButtonLeft : (mouse_button == 1) ? ImGuiButtonFlags_MouseButtonRight : ImGuiButtonFlags_MouseButtonMiddle;
    if (g.HoveredId == 0) // If nothing hovered so far in the frame (not same as IsAnyItemHovered()!)
        ImGui::ButtonBehavior(window->Rect(), window->GetID("##scrolldraggingoverlay"), &hovered, &held, button_flags);
    if (held && delta.x != 0.0f)
        ImGui::SetScrollX(window, window->Scroll.x + delta.x);
    if (held && delta.y != 0.0f)
        ImGui::SetScrollY(window, window->Scroll.y + delta.y);
}

static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_offsets, int accumulative_offsets_count, ImWchar* out_ranges)
{
    for (int n = 0; n < accumulative_offsets_count; n++, out_ranges += 2)
    {
        out_ranges[0] = out_ranges[1] = (ImWchar)(base_codepoint + accumulative_offsets[n]);
        base_codepoint += accumulative_offsets[n];
    }
    out_ranges[0] = 0;
}

const ImWchar* GetGlyphRangesChineseSimplifiedOfficial()
{
    // Store all official characters for Simplified Chinese.
    // Sourced from https://en.wikipedia.org/wiki/Table_of_General_Standard_Chinese_Characters
    // (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)
    static const short accumulative_offsets_from_0x4E00[] =
    {
        0,1,2,4,1,1,1,1,2,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,4,2,1,2,3,1,2,3,2,2,4,1,1,1,2,1,4,1,2,3,1,2,1,1,1,1,1,2,1,1,2,2,1,3,1,1,1,1,1,5,3,7,1,2,5,6,
        8,2,1,2,1,1,1,1,2,1,1,1,1,3,2,1,4,2,1,2,1,1,1,1,1,2,1,1,1,4,1,2,1,2,1,1,5,1,1,1,1,1,1,1,1,2,1,1,2,1,3,2,1,1,1,1,1,1,4,1,1,2,2,1,1,3,2,1,1,
        4,2,1,2,1,1,4,2,2,2,7,1,1,1,2,1,1,1,1,6,1,1,1,1,3,1,1,2,1,1,1,1,1,3,1,2,2,1,2,2,2,2,2,2,1,1,3,2,3,7,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,3,1,
        1,4,3,3,1,3,1,2,2,2,1,1,1,1,1,2,1,1,1,4,1,2,2,2,2,3,3,1,3,2,3,3,2,1,1,1,1,1,2,2,1,5,1,4,6,4,1,1,5,3,1,1,1,1,6,1,1,1,2,1,1,1,2,2,3,2,1,1,1,
        2,1,1,2,2,2,1,2,2,4,14,1,2,3,1,1,1,3,1,1,2,2,1,2,4,1,1,1,1,1,2,1,1,6,6,1,1,2,3,2,4,1,4,2,1,4,2,5,2,5,4,7,1,3,2,4,1,4,3,1,1,3,2,3,1,4,5,3,
        14,2,2,1,1,3,6,8,1,12,7,1,5,2,4,12,1,5,1,1,2,3,2,6,11,1,4,7,15,5,13,1,11,1,1,2,1,1,1,2,1,2,2,4,3,1,1,4,2,6,3,3,3,1,1,1,2,1,2,1,1,1,1,1,1,
        2,1,1,3,1,4,3,1,3,1,2,3,2,1,2,2,2,1,4,2,2,1,7,2,1,1,1,1,1,2,1,1,4,1,1,3,4,2,1,2,2,1,3,2,2,5,3,2,3,1,3,7,2,2,1,3,3,2,1,1,1,1,1,2,1,1,2,3,1,
        1,2,3,1,3,1,4,1,1,1,1,1,2,3,4,4,1,2,1,1,1,2,3,3,1,1,1,1,1,2,2,1,1,1,1,2,5,1,1,1,3,1,3,1,1,6,2,1,2,4,2,2,1,5,3,11,2,2,1,2,4,8,3,8,2,1,1,1,
        1,1,1,5,1,1,1,1,1,4,1,1,9,2,1,4,4,2,2,2,3,2,2,2,2,2,5,1,4,12,10,4,1,1,5,1,2,5,2,1,5,1,1,2,3,1,3,1,2,3,4,4,11,1,1,1,2,1,2,2,2,2,1,1,1,4,1,
        2,1,1,2,1,1,3,2,2,1,1,1,1,1,1,2,1,4,1,2,1,1,1,2,1,1,2,1,2,5,3,2,1,1,3,2,1,1,8,1,2,2,3,2,3,1,2,1,2,1,5,13,3,1,2,1,4,1,1,1,1,1,1,1,4,3,1,1,
        1,1,1,1,1,4,1,3,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,1,4,2,1,2,2,1,1,2,1,1,1,1,1,1,1,2,1,1,4,2,1,1,1,1,2,3,1,1,1,2,1,1,1,1,2,1,2,1,
        3,1,2,1,1,1,2,3,3,1,1,2,1,5,2,1,1,1,1,1,1,1,2,1,6,1,1,2,2,9,1,1,2,1,1,1,3,1,1,3,2,2,2,1,2,2,1,1,1,1,1,2,2,1,1,3,1,1,2,4,2,1,1,1,1,1,1,1,1,
        1,3,2,2,1,4,2,1,2,2,1,1,1,1,1,2,1,1,1,3,1,1,1,1,1,1,1,1,1,2,2,1,3,1,1,3,3,1,1,1,1,1,3,1,3,1,1,7,2,1,2,2,5,1,2,6,1,1,3,7,2,3,2,1,1,3,3,2,2,
        1,1,1,2,2,2,5,2,1,2,2,1,2,3,1,6,5,1,6,5,3,1,1,1,3,1,1,1,1,2,4,1,1,1,1,3,1,2,2,1,1,1,1,2,1,1,1,1,1,4,2,3,4,1,3,1,2,5,3,10,2,2,2,2,2,2,1,6,
        1,4,3,1,3,1,1,1,1,2,6,1,1,1,2,2,1,1,1,2,2,1,1,3,3,1,2,2,6,1,2,1,7,1,3,2,1,9,2,1,3,1,2,2,1,3,5,1,4,1,2,2,3,2,4,1,2,5,5,1,1,6,3,1,1,3,6,2,4,
        1,1,1,1,5,5,5,1,8,1,1,8,1,4,7,9,10,2,8,5,14,10,6,1,3,1,1,1,1,2,7,2,3,1,3,1,2,2,1,3,1,1,4,1,2,2,1,1,2,4,9,3,3,3,1,5,1,1,1,1,1,1,1,1,2,1,6,
        1,1,3,2,2,5,2,1,1,1,1,1,1,1,1,1,5,3,1,1,1,1,1,1,1,3,1,1,2,1,1,1,1,1,2,1,3,4,4,1,1,5,1,1,2,2,3,1,1,1,1,3,1,2,4,1,1,3,1,1,1,1,1,1,2,1,2,2,2,
        1,1,2,1,2,1,3,2,4,1,3,1,3,1,4,1,2,1,3,2,1,2,1,1,1,3,2,1,4,6,1,2,2,5,1,3,1,1,2,1,5,1,3,1,2,2,1,1,1,2,1,4,4,5,2,1,3,3,1,2,6,2,3,7,1,1,6,1,1,
        6,1,4,3,4,5,1,7,6,1,5,13,2,1,2,2,3,1,7,2,1,2,3,1,1,4,1,2,2,3,2,1,19,5,4,12,4,15,7,1,2,2,3,3,2,1,11,3,6,2,1,4,1,1,3,1,2,3,5,1,2,2,1,1,1,1,
        1,1,2,3,3,1,1,1,2,5,1,2,3,1,1,2,3,1,2,2,1,1,1,1,1,2,6,1,1,3,8,6,1,2,2,1,4,4,1,1,1,2,1,1,2,3,5,1,3,1,1,1,5,5,1,1,2,1,1,1,1,2,1,1,3,7,2,3,8,
        2,2,1,5,1,1,1,1,3,1,2,2,1,1,5,1,1,3,4,2,3,5,3,2,2,2,1,1,2,1,1,1,1,1,1,3,5,2,5,4,3,1,3,2,4,8,1,2,1,1,6,4,6,3,1,2,1,8,3,2,4,2,2,2,3,3,1,8,1,
        1,1,1,3,1,1,3,3,2,2,12,1,3,4,1,3,12,3,4,1,1,2,3,6,3,1,2,5,3,6,2,1,1,2,2,2,4,1,2,3,3,1,1,2,4,12,12,13,1,4,10,7,8,3,8,1,5,11,1,2,1,1,1,1,1,
        1,1,1,1,1,2,3,1,1,1,1,3,1,2,4,1,2,2,5,3,4,2,1,1,2,1,1,2,1,3,4,2,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,3,1,1,4,3,1,1,1,2,1,4,1,1,2,1,2,1,1,1,5,4,
        2,1,10,1,1,2,3,1,3,6,2,8,1,1,1,1,3,2,3,2,3,1,5,2,3,1,1,2,2,2,1,5,2,1,2,1,2,2,5,3,4,1,1,1,1,1,1,1,1,1,1,1,2,3,1,1,1,3,1,1,1,4,4,5,2,1,2,2,
        1,9,2,8,1,2,2,1,2,1,6,2,2,1,3,1,3,2,1,1,1,1,1,1,2,2,2,1,5,1,2,1,1,4,2,2,2,1,5,2,2,1,1,1,7,7,5,1,1,2,6,2,1,1,1,1,1,2,3,3,1,10,4,1,1,1,1,1,
        2,1,5,2,4,2,2,4,1,3,1,2,3,2,1,2,4,1,6,2,7,1,1,2,4,2,3,1,1,2,8,2,2,1,2,12,2,1,3,3,2,14,3,8,5,1,6,4,2,7,12,5,14,2,2,4,16,1,3,1,3,1,1,1,1,2,
        3,1,2,1,1,1,3,6,1,3,1,1,2,1,2,4,3,1,1,3,1,1,2,1,1,1,1,1,4,5,1,1,5,1,3,6,1,3,1,1,5,2,1,7,8,1,1,5,3,3,1,8,8,1,1,2,2,2,1,1,1,2,5,2,1,3,1,4,1,
        1,2,1,1,1,1,2,1,2,2,1,1,4,1,1,1,6,4,2,2,1,1,1,1,3,2,8,3,1,1,6,1,1,3,3,2,13,2,12,1,3,5,1,1,1,1,1,2,1,1,2,1,4,2,2,2,2,1,3,4,1,2,3,1,1,1,1,4,
        2,2,5,2,1,1,2,4,18,1,2,1,1,1,5,2,3,2,2,1,2,1,2,1,3,1,2,4,2,2,1,4,1,1,2,1,2,1,1,1,1,5,2,3,2,1,1,2,1,5,7,2,3,1,7,2,5,1,6,2,1,3,3,1,2,1,1,1,
        4,1,1,1,4,1,2,1,3,3,3,1,2,1,3,2,2,3,2,1,2,1,1,1,1,1,1,1,1,1,4,3,1,1,3,2,1,1,3,2,1,1,3,1,4,1,1,1,1,1,1,4,6,6,1,3,2,1,1,8,2,3,2,1,1,1,4,1,3,
        5,1,1,3,1,1,1,1,1,1,2,1,3,3,2,1,1,1,1,1,2,4,1,2,2,1,3,1,5,2,2,4,1,2,2,1,2,1,3,2,3,1,1,2,1,1,1,2,4,3,1,9,1,1,3,1,3,3,3,1,3,1,1,1,1,1,2,1,6,
        1,1,1,2,1,1,1,1,1,3,1,2,3,1,6,1,2,3,2,1,4,1,1,1,4,1,5,5,1,3,1,2,1,4,2,18,7,2,2,2,2,3,4,8,5,3,2,1,4,1,3,5,2,20,3,6,1,4,14,1,1,3,1,10,3,4,4,
        6,2,1,6,1,2,18,15,10,7,2,2,1,1,1,1,1,1,1,1,3,1,1,1,2,1,4,2,1,1,1,1,5,2,1,1,5,1,3,6,1,1,1,1,1,1,2,1,1,1,1,1,1,2,1,3,1,1,1,4,3,3,5,3,1,2,1,
        1,1,1,1,1,1,3,3,3,1,2,1,1,1,1,3,1,5,1,7,1,1,1,1,1,1,1,2,1,4,1,1,1,2,1,3,3,1,5,4,4,2,1,1,2,3,1,1,1,1,1,1,1,1,2,1,1,2,2,1,1,2,1,1,1,2,1,3,3,
        1,1,1,1,1,1,1,3,1,1,1,2,2,1,2,1,5,1,1,1,2,1,5,1,1,5,3,2,3,4,1,2,1,1,1,1,2,1,1,1,2,2,1,4,3,7,1,3,5,1,2,1,3,2,1,1,1,1,1,5,9,1,2,1,1,4,2,4,1,
        1,7,1,3,1,2,3,2,5,1,1,1,2,2,1,1,2,4,2,6,2,2,1,2,2,1,1,1,2,1,1,2,3,1,3,1,2,2,2,6,2,3,4,2,1,2,3,1,10,1,2,6,1,3,6,1,2,2,5,2,1,1,1,3,6,1,3,1,
        2,1,1,7,1,2,2,1,5,4,2,1,7,6,3,4,3,1,1,1,1,2,5,3,2,4,3,3,9,2,4,7,4,1,4,5,2,1,2,10,1,3,1,3,5,6,5,3,1,1,2,5,2,1,2,2,4,2,3,8,1,2,2,6,6,4,2,2,
        25,1,9,9,6,13,6,3,1,7,2,1,2,2,1,1,6,3,1,3,3,2,3,1,1,3,2,2,1,4,1,3,3,2,1,4,2,2,3,16,4,1,4,1,2,4,2,2,1,1,2,1,1,3,1,2,2,2,2,2,1,6,3,3,1,4,2,
        1,1,1,5,1,2,1,1,2,4,1,7,2,2,3,1,1,1,1,3,1,1,1,1,1,3,1,1,1,1,2,1,4,1,2,1,1,2,1,1,1,1,2,2,1,3,1,1,1,4,4,2,1,1,2,1,1,2,1,2,1,2,2,2,2,1,1,1,4,
        2,1,1,3,2,2,5,1,1,3,1,2,1,1,1,1,1,2,1,4,1,2,1,2,2,2,2,1,3,1,1,1,3,2,1,3,4,4,2,1,2,5,5,4,1,1,6,10,1,6,4,2,1,1,3,5,1,9,4,13,2,1,1,9,3,7,2,1,
        1,3,2,3,2,1,1,8,1,2,2,2,1,3,1,1,2,4,2,2,7,2,2,1,1,1,2,2,2,1,1,3,2,3,3,2,1,1,2,2,1,3,2,1,1,1,2,2,1,3,3,2,1,1,1,4,2,1,1,1,3,2,1,2,1,2,2,4,1,
        2,1,2,3,1,2,2,2,2,3,5,2,1,2,2,1,1,4,1,2,2,1,2,1,2,2,1,2,1,2,1,1,1,1,8,2,1,4,2,5,1,1,1,1,1,2,2,1,1,2,1,1,2,2,3,4,3,3,1,1,2,1,3,6,2,1,5,2,1,
        1,1,1,1,2,1,1,1,1,1,3,1,6,2,2,8,1,8,1,1,3,1,1,2,1,1,1,2,1,1,1,1,1,1,2,1,1,2,2,2,1,2,1,1,11,1,1,1,1,1,1,1,1,1,2,4,3,2,2,1,2,8,2,2,1,6,3,4,
        4,9,2,1,3,1,1,5,2,1,3,1,1,7,1,1,1,1,1,1,7,2,2,3,2,1,2,3,2,6,3,1,4,2,1,1,2,2,1,4,4,1,1,1,1,3,1,4,1,5,2,1,2,1,1,1,12,1,4,6,3,3,4,4,1,4,2,3,
        16,2,3,2,1,3,1,2,3,3,3,1,1,3,1,8,1,1,3,6,1,1,1,1,1,1,1,4,4,3,1,1,5,1,11,1,3,2,3,1,3,3,4,6,2,7,2,2,2,4,6,1,1,3,1,13,4,1,11,2,11,13,1,7,2,7,
        2,5,2,4,8,1,6,3,9,1,7,1,2,3,3,4,1,11,8,3,4,4,10,2,1,6,7,2,9,2,1,26,60,30,1,1,1,1,3,11,6,1,1,1,3,5,2,1,1,2,3,13,9,1,1,1,1,1,3,15,2,1,5,1,1,
        1,2,1,2,1,1,2,5,1,3,4,1,6,2,7,9,1,1,2,8,2,1,3,6,1,1,2,1,2,1,1,1,1,1,2,2,6,9,1,4,4,2,4,4,8,1,1,6,2,1,1,2,1,1,1,2,1,1,1,4,2,1,2,2,1,1,1,1,4,
        1,1,2,2,4,6,1,1,1,1,4,1,1,1,1,1,5,4,1,2,4,1,1,1,1,1,1,3,3,1,1,1,1,2,3,2,2,2,3,4,1,3,1,1,1,1,1,1,1,1,3,3,1,3,1,4,1,1,1,4,2,2,1,1,1,1,1,1,1,
        1,2,1,3,2,5,1,1,1,1,1,1,1,3,1,1,1,2,2,1,2,4,3,1,1,1,1,2,1,1,1,2,2,1,1,1,2,3,2,1,3,1,1,1,2,2,2,1,2,1,1,1,1,3,3,3,1,3,1,2,3,1,1,4,1,1,1,1,3,
        4,1,2,2,1,2,1,2,1,3,1,1,1,1,3,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,4,1,1,1,2,1,1,1,2,2,1,3,1,2,1,1,1,1,2,2,3,1,4,6,2,1,3,1,3,
        1,1,2,1,2,1,1,3,3,2,1,1,1,1,1,1,1,2,1,1,1,1,1,3,1,3,2,1,3,7,1,4,1,1,1,4,1,3,2,5,2,1,3,1,1,1,1,1,3,2,5,1,2,1,2,2,1,3,2,2,1,9,5,2,1,1,2,1,3,
        3,3,3,2,1,1,2,1,1,4,2,2,2,1,2,2,4,2,2,7,1,5,4,1,3,2,1,2,2,3,1,1,2,4,8,3,4,2,10,1,2,2,2,1,1,2,4,2,1,8,2,2,2,1,1,2,3,1,1,3,5,2,1,2,1,1,1,2,
        1,1,2,4,1,1,3,1,2,2,2,2,2,2,1,1,2,1,2,4,1,1,1,1,2,1,1,1,1,1,1,1,9,5,9,4,2,1,2,4,4,1,1,1,10,4,2,3,1,1,2,2,2,2,1,2,1,2,2,1,2,8,1,4,2,2,7,2,
        4,2,1,3,4,3,4,1,4,2,1,3,2,2,1,1,4,2,4,1,3,1,1,13,1,5,4,2,3,3,6,1,2,3,3,1,3,2,7,2,6,1,12,2,1,8,5,1,29,1,4,3,6,1,8,14,4,4,3,12,4,3,15,13,2,
        2,1,5,1,2,4,2,1,1,5,1,3,1,2,2,4,2,1,1,2,1,3,1,2,4,8,1,1,1,1,2,2,4,1,1,2,1,1,3,1,1,1,5,2,10,4,1,2,1,1,2,1,4,2,1,1,1,2,1,1,2,7,1,2,1,1,2,9,
        3,1,2,4,3,2,1,1,1,1,1,2,2,8,9,1,1,5,11,2,2,5,1,1,2,5,9,2,1,5,2,1,1,6,4,1,1,4,2,3,7,3,3,5,5,4,1,2,1,3,1,5,3,4,9,4,2,8,7,1,3,1,5,1,5,6,5,2,
        7,11,13,1,13,6,3,2,9,2,2,4,1,4,1,1,1,1,2,2,2,2,1,5,1,4,1,5,4,3,1,1,2,2,2,1,2,1,1,1,2,5,1,3,3,4,1,1,3,1,1,1,3,3,3,1,2,2,3,13,9,4,3,1,4,2,1,
        1,1,8,1,1,1,4,1,4,1,2,2,5,2,4,1,2,1,7,1,3,1,1,1,1,1,1,1,1,3,1,2,1,1,5,2,1,3,3,4,7,1,1,4,1,1,1,3,1,3,4,1,1,1,2,1,1,1,3,3,2,1,4,1,14,3,2,5,
        9,12,1,2,5,10,5,1,3,2,2,3,3,1,1,2,1,2,1,1,1,3,1,1,1,1,2,1,1,3,2,2,1,1,1,1,1,1,3,1,2,1,1,1,3,1,2,3,2,1,1,1,1,1,1,2,1,1,1,3,1,3,2,2,1,2,2,1,
        2,1,1,2,1,1,2,3,2,3,2,1,1,1,3,3,3,1,1,1,1,1,1,1,4,1,1,4,6,1,4,2,1,2,1,1,2,2,1,1,1,1,1,1,2,1,1,1,1,6,4,1,1,1,1,1,1,11,2,1,1,1,1,2,1,1,1,1,
        1,1,3,5,1,4,1,3,1,2,3,1,7,2,1,2,3,1,1,3,3,2,2,6,4,2,1,1,5,2,1,1,1,2,2,3,1,8,6,18,4,2,4,2,2,2,1,1,2,8,1,5,2,1,4,4,5,9,2,2,2,4,1,2,2,3,2,4,
        1,2,1,1,1,1,1,2,1,1,1,1,2,2,1,2,1,3,2,5,3,3,1,2,1,5,2,3,1,1,1,8,1,1,4,2,3,3,2,4,1,6,2,2,3,7,2,1,1,3,2,1,2,1,3,2,1,1,1,1,1,1,6,1,1,1,1,1,1,
        1,1,1,1,3,1,3,1,1,4,1,1,1,2,1,1,1,3,5,1,1,1,3,3,3,4,1,1,2,1,1,2,1,5,1,3,5,3,3,1,1,2,2,1,4,2,4,5,2,1,1,2,4,1,2,2,1,1,3,1,1,2,3,3,1,1,3,4,2,
        1,1,3,9,1,7,2,1,5,2,5,8,4,9,3,2,1,1,3,2,2,1,1,3,3,3,2,2,1,3,2,3,6,2,7,1,3,1,2,11,3,3,1,2,1,1,3,1,1,1,1,1,2,2,1,1,3,4,6,1,8,1,2,1,2,3,1,1,
        3,2,3,3,3,1,1,1,1,2,12,1,5,1,2,4,2,1,3,1,2,6,1,1,1,2,2,4,1,2,1,3,7,2,1,9,1,6,1,1,2,1,2,3,1,13,4,1,1,1,4,1,6,1,1,1,3,1,13,1,2,3,2,2,1,1,1,
        1,3,3,2,6,2,2,14,10,4,1,2,4,1,2,2,2,2,1,1,1,2,3,3,2,3,1,2,1,1,1,1,2,2,3,3,1,4,1,2,2,1,1,2,2,1,2,1,3,2,2,4,1,1,1,2,4,1,2,1,1,1,1,1,2,2,1,4,
        2,3,2,1,1,2,2,2,1,1,1,2,1,3,13,1,1,1,1,14,3,4,4,1,1,3,1,1,1,2,2,4,1,2,1,1,3,2,2,2,2,1,8,1,1,1,1,2,3,5,3,4,4,1,1,4,1,4,1,4,3,5,7,4,6,2,3,2,
        2,6,4,7,7,11,22,1,5,2,2,2,1,2,3,1,1,1,1,1,3,1,1,3,2,1,1,3,1,1,1,1,1,1,2,3,2,1,5,2,3,5,1,2,2,2,2,1,3,1,5,1,4,3,2,4,2,1,9,3,12,6,1,1,2,1,2,
        1,2,3,3,2,2,4,1,3,3,7,4,1,2,1,2,2,1,1,2,1,8,3,2,1,2,2,1,3,5,1,1,1,3,3,3,2,1,4,2,3,16,4,2,2,1,1,2,5,2,11,6,2,3,3,17,4,2,1,1,1,1,5,1,1,2,1,
        1,3,2,3,1,3,1,3,1,1,1,4,1,2,1,3,2,1,2,4,1,6,5,7,12,6,5,2,1,5,1,1,3,2,1,5,2,2,10,1,3,2,4,1,2,2,2,1,4,2,3,1,4,2,3,2,4,1,1,2,2,1,1,2,1,2,2,5,
        2,2,2,2,5,2,2,2,1,3,1,1,1,2,2,2,2,1,1,1,3,2,2,1,1,8,3,1,3,1,1,2,2,1,2,2,5,8,3,3,1,1,1,1,5,5,1,4,1,1,1,1,1,1,1,4,3,4,9,5,1,5,5,2,6,1,3,4,4,
        1,4,4,1,2,6,5,2,5,4,2,2,1,3,6,1,7,2,1,7,3,6,8,7,1,1,12,24,14,1,7,1,1,12,8,1,3,2,1,4,1,1,1,3,2,1,5,4,3,1,1,6,3,1,1,1,2,4,2,1,2,2,1,5,3,1,1,
        2,3,3,1,8,7,6,6,15,22,2,5,4,4,45,18,9,47,8,114,2,25,6,3,3,59,25,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,8,2,1,8,3,1,3,1,2,1,2,5,2,1,6,1,1,4,3,1,2,2,3,4,1,3,
        9,2,2,3,2,1,1,1,4,3,1,1,2,3,3,8,1,1,1,6,1,3,1,2,1,1,1,1,2,3,2,2,2,6,1,3,1,1,1,4,1,1,4,1,3,5,1,1,1,2,4,4,1,2,2,1,2,1,1,1,1,4,1,1,2,1,1,1,2,
        1,1,1,1,1,3,4,2,2,1,1,1,1,1,1,6,1,2,2,1,1,1,3,2,2,3,1,3,4,1,1,1,5,2,4,2,15,1,7,14,4,1,2,1,2,2,1,7,3,2,2,1,2,2,1,1,1,2,1,4,1,1,2,1,1,2,1,2,
        3,1,2,2,1,1,1,1,1,1,1,1,2,2,4,1,1,8,1,2,1,1,1,1,1,2,1,2,1,1,2,1,1,1,1,1,1,2,1,1,1,1,1,2,2,2,2,1,5,4,3,1,3,1,1,1,1,1,1,1,2,2,2,4,1,10,3,3,
        2,1,4,2,6,1,7,2,2,1,1,4,1,1,1,1,1,3,1,1,6,5,2,1,1,4,1,1,1,1,3,5,1,1,1,1,1,1,1,2,6,2,5,2,7,1,2,1,1,9,2,11,7,1,5,2,1,3,4,2,5,11,7,4,3,2,1,6,
        1,7,1,2,2,1,1,2,1,1,6,1,3,2,2,7,1,2,1,1,2,1,2,5,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,3,6,1,2,2,2,3,1,9,2,5,9,6,1,1,2,1,1,6,3,1,1,3,1,1,4,2,1,2,1,
        1,2,1,5,1,1,3,1,2,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,3,1,1,3,1,1,3,3,3,1,1,1,1,1,1,1,1,2,1,1,1,1,2,1,3,1,2,1,1,1,2,1,1,1,1,4,4,2,3,3,2,2,
        3,2,1,1,1,1,1,1,2,1,2,1,2,1,2,2,1,1,2,3,1,1,1,10,1,3,1,1,2,2,2,1,1,1,2,1,1,2,1,3,1,2,1,2,1,2,6,1,1,1,1,1,2,3,1,1,1,2,1,1,1,2,1,1,1,1,1,1,
        1,1,1,1,1,1,8,1,3,1,1,8,1,3,5,4,1,5,1,2,1,1,1,2,8,1,1,1,5,1,1,1,1,2,1,1,1,1,2,1,2,1,1,1,3,2,2,1,2,1,2,5,2,2,4,1,2,1,1,4,4,1,6,1,1,7,3,1,4,
        2,1,2,5,1,1,1,1,2,7,2,2,1,6,1,1,1,1,1,1,8,2,5,1,3,1,9,8,3,5,1,2,1,1,1,5,2,6,2,1,1,3,1,2,1,1,1,2,2,8,2,3,1,1,2,1,2,2,7,2,3,3,2,7,7,2,1,2,4,
        1,1,1,2,2,2,1,2,3,2,1,3,2,1,1,2,3,7,2,1,2,1,2,1,6,4,12,3,1,3,5,2,2,5,2,4,3,5,2,10,1,11,1,1,1,1,1,1,6,5,1,1,12,1,2,5,6,4,8,2,2,5,1,1,3,3,3,
        1,2,8,12,1,6,2,4,2,4,1,1,3,4,1,1,6,2,8,6,1,3,2,7,3,1,4,2,2,1,18,4,6,12,5,2,15,2,15,4,18,1,1,1,1,1,1,6,4,4,2,7,1,2,3,6,1,1,1,1,1,1,1,1,1,1,
        1,2,2,4,1,1,1,6,2,7,1,6,1,3,1,1,1,2,3,1,1,1,2,2,4,6,3,1,2,1,2,1,1,3,1,1,1,3,4,1,2,3,1,5,5,4,1,2,1,1,1,1,4,1,5,2,2,1,4,1,1,1,3,1,2,2,1,2,2,
        1,2,2,2,3,1,1,2,4,5,3,3,3,4,3,1,8,1,1,3,2,5,4,1,1,7,3,1,1,9,2,2,2,2,5,1,1,1,4,1,2,3,3,2,10,8,1,3,5,3,1,1,2,2,2,2,5,3,3,6,4,1,4,2,1,9,5,5,
        5,1,3,11,5,5,7,1,8,2,1,11,1,16,7,3,4,3,1,1,7,1,1,4,2,3,2,7,1,1,1,2,3,1,2,1,2,2,2,5,6,1,1,2,1,2,1,1,2,3,2,5,4,1,5,6,2,6,1,2,2,2,6,5,5,1,3,1,
        2,1,5,4,2,1,3,1,2,4,3,1,1,1,3,8,1,2,1,4,1,3,2,4,8,6,2,1,2,4,1,1,4,2,4,5,1,4,1,4,2,11,3,17,5,2,2,1,7,5,16,4,2,2,3,59,1,1,1,1,1,1,1,1,1,1,1,
        2,1,1,1,1,4,4,2,2,1,4,2,1,5,2,2,2,2,12,1,4,3,19,36,10,23,26,16,1,9,116,95,6,53,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
        ,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,3,2,5,1,2,3,9,5,7,1,6,2,1,3,5,5,1,1,8,3,1,3,
        1,2,8,4,133,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,2,1,3,1,2,3,3,1,1,1,1,10,3,1,5,1,6,3,11,4,12,2,2,1,1,3,2,2,2,1,3,1,1,2,5,1,2,1,1,1,5,1,3,1,2,1,1,4,1,4,2,2,3,2,2,2,1,1,1,1,1,
        1,2,8,4,1,2,3,3,2,9,1,1,3,1,3,3,1,2,2,1,2,4,1,3,1,3,3,1,1,2,1,2,1,1,1,1,5,1,1,7,1,2,6,4,3,3,1,2,1,2,2,2,6,1,1,1,2,4,2,8,1,4,8,2,13,1,3,3,8,
        172,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,4,5,1,2,5,1,8,4,1,1,2,
        1,2,1,2,1,6,2,1,2,1,1,3,1,2,1,1,1,1,3,2,1,1,2,1,1,1,2,1,2,3,4,1,1,1,3,3,1,1,1,1,1,1,3,1,1,2,2,1,1,1,2,2,1,3,1,2,1,1,1,1,1,4,7,1,1,5,1,1,2,
        3,1,2,3,1,2,2,1,6,2,1,1,1,1,4,1,3,7,1,2,3,5,1,6,1,4,4,2,1,2,1,5,3,6,2,2,2,1,1,2,2,3,1,1,1,3,2,2,2,2,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,2,2,1,1,
        2,1,2,4,1,1,1,2,4,3,1,1,1,4,1,2,2,1,1,2,1,2,2,5,4,5,1,1,1,2,1,1,1,7,5,6,1,1,1,2,2,2,2,1,8,4,2,8,9,1,2,1,3,1,1,1,1,1,1,1,2,5,3,3,1,3,1,1,1,
        1,1,3,1,2,2,1,1,1,1,2,1,1,1,1,1,1,3,1,1,6,2,2,2,1,1,3,1,1,8,1,7,6,2,3,1,1,5,1,5,4,9,2,1,2,1,1,1,1,1,11,152,26,32,24,2,118,44,37,59,12,104,
        45,27,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,
        1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,
        1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,105,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,1,1,1,1,1,1,2,3,2,9,4,3,1,1,1,1,1,5,1,1,2,1,2,2,1,1,1,1,1,2,1,1,1,2,1,3,1,6,3,1,2,1,2,3,1,1,1,2,6,2,1,1,1,12,2,1,2,3,2,2,1,4,3,1,1,3,11,
        2,7,3,3,3,1,2,1,1,2,1,3,1,1,1,2,1,2,1,1,1,3,3,11,8,1,1,5,2,2,3,1,2,5,2,1,3,1,1,1,1,1,4,1,1,4,3,6,2,10,2,3,3,2,6,1,5,20,1,3,3,2,3,2,1,1,3,4,
        3,4,3,1,2,2,2,2,1,2,2,4,6,2,4,1,2,4,8,1,2,4,1,3,1,1,1,1,3,1,1,14,36,1,1,1,1,1,1,1,6,2,1,127,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,39,1,1,1,1,1,1,1,2,1,1,5,1,8,1,37,3,30,38,1,16,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,2,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,4,1,7,2,1,196,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,5,1,1,2,2,4,1,1,1,2,6,1,2,3,2,5,9,1,4,5,2,2,10,2,2,6,5,7,3,1,5,7,4,12,3,4,1,4,1,5,1,1,1,1,
        1,1,1,1,2,2,2,2,3,296,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,315,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,1,1,2,5,1,3,6,1,1,3,7,
        2,7,18,1,2,2,1,6,3,2,4,1,1,2,3,4,3,1,1,2,1,1,1,3,2,2,1,5,10,2,1,2,13,2,1,2,2,1,4,2,7,2,7,2,1,3,2,6,2,2,2,1,3,6,2,7,1,46,1,1,1,1,1,1,1,1,1,
        1,1,1,1,13,1,1,4,1,2,43,1,1
    };
    static ImWchar base_ranges[] = // not zero-terminated
    {
        0x0020, 0x00FF, // Basic Latin + Latin Supplement
        0x2000, 0x206F, // General Punctuation
        0x3000, 0x30FF, // CJK Symbols and Punctuations, Hiragana, Katakana
        0x31F0, 0x31FF, // Katakana Phonetic Extensions
        0xFF00, 0xFFEF  // Half-width characters
    };
    static ImWchar full_ranges[IM_ARRAYSIZE(base_ranges) + IM_ARRAYSIZE(accumulative_offsets_from_0x4E00) * 2 + 1] = { 0 };
    if (!full_ranges[0])
    {
        memcpy(full_ranges, base_ranges, sizeof(base_ranges));
        UnpackAccumulativeOffsetsIntoRanges(0x4E00, accumulative_offsets_from_0x4E00, IM_ARRAYSIZE(accumulative_offsets_from_0x4E00), full_ranges + IM_ARRAYSIZE(base_ranges));
    }
    return &full_ranges[0];
}

const ImWchar* GetGlyphRangesChineseTraditionalOfficial()
{
    // Store all official characters for Traditional Chinese.
    // Sourced from https://https://en.wikipedia.org/wiki/List_of_Graphemes_of_Commonly-Used_Chinese_Characters
    // (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)
    static const short accumulative_offsets_from_0x4E00[] =
    {
        0,1,2,5,1,1,1,2,3,1,3,1,1,2,1,5,1,3,4,5,2,5,6,1,2,8,2,6,2,1,1,3,1,3,2,1,4,1,1,10,10,11,4,4,2,3,1,2,3,1,2,1,4,2,3,1,2,3,1,1,2,3,1,1,1,12,6,1,
        2,1,2,1,3,1,2,7,1,1,1,1,1,5,1,4,1,1,11,2,1,3,5,1,1,2,2,8,1,3,2,1,1,4,4,22,1,4,2,2,2,2,1,6,3,1,1,5,1,1,1,1,3,1,2,2,2,1,1,1,2,3,6,3,3,1,3,2,6,
        4,4,3,2,3,2,2,7,5,2,17,1,6,1,9,3,1,1,6,4,1,1,1,6,1,2,3,1,1,1,1,13,1,4,5,2,4,2,6,3,2,1,1,2,2,1,2,2,2,1,1,5,2,2,2,1,2,1,1,1,2,9,6,7,4,2,3,2,1,
        6,5,2,9,15,1,1,1,6,3,5,8,4,5,2,1,9,10,1,5,1,2,2,4,3,7,10,2,4,1,4,9,2,2,7,3,4,4,2,5,2,2,4,1,7,2,2,4,7,2,9,8,5,5,4,1,2,1,1,1,1,1,1,2,1,1,4,1,2,
        1,2,5,6,3,2,1,1,2,1,1,1,3,4,1,1,1,4,4,9,1,3,4,1,3,11,2,2,1,7,4,6,1,6,9,5,1,1,15,1,3,1,15,1,2,3,2,1,1,3,3,1,2,3,1,1,2,4,3,1,5,6,7,4,1,1,1,3,2,
        6,1,1,2,1,6,2,4,3,1,1,1,1,6,2,5,1,1,12,1,5,3,2,1,2,6,2,4,4,1,1,4,4,10,4,1,3,6,1,1,1,18,3,2,4,2,9,3,2,1,1,2,2,1,1,3,2,15,2,3,3,3,1,1,5,1,2,5,
        2,1,5,1,1,2,4,3,1,2,7,5,2,8,5,1,1,1,2,2,2,1,1,1,7,1,1,1,3,3,2,2,2,1,5,1,5,2,2,1,2,2,2,1,1,2,4,5,22,5,6,8,5,9,8,5,1,1,1,2,7,2,1,2,2,4,3,1,1,1,
        1,2,1,1,1,1,1,1,1,1,1,1,1,2,3,4,5,2,1,2,2,1,2,1,1,1,1,1,1,1,9,2,1,1,1,6,1,2,2,2,1,3,2,2,3,1,2,1,2,2,2,1,3,2,2,4,2,18,6,9,2,2,1,1,1,3,1,1,3,4,
        2,5,1,2,2,2,3,1,4,12,1,1,1,1,1,1,3,2,2,5,3,2,3,1,1,2,3,1,1,5,19,4,1,2,1,1,3,1,4,8,2,5,5,1,2,7,4,19,5,2,1,2,2,4,1,6,3,2,1,2,4,5,6,1,6,2,1,2,2,
        1,1,1,4,17,1,2,2,2,1,1,3,2,1,1,9,4,2,2,1,2,8,3,2,2,3,1,1,8,10,1,1,2,5,3,2,7,2,3,2,2,1,1,3,7,8,6,1,2,6,2,1,4,7,2,1,4,4,10,5,1,1,2,2,2,3,2,4,
        15,5,4,2,9,2,1,3,1,1,1,1,3,2,3,4,1,7,5,2,7,1,6,16,3,6,6,2,1,5,4,1,1,6,1,1,2,5,9,1,3,2,4,6,6,1,9,9,5,3,2,5,1,3,2,7,9,4,1,2,1,3,11,2,7,3,3,1,
        1,1,1,16,3,2,3,1,13,5,6,1,8,21,2,1,11,21,8,3,6,11,1,23,2,1,8,3,1,27,3,6,5,1,1,3,1,21,2,5,3,3,1,2,4,4,9,10,4,5,2,3,2,5,9,9,2,1,9,6,5,11,3,4,
        2,10,2,2,3,1,5,1,5,5,2,1,3,10,1,3,18,6,1,3,1,2,3,3,2,1,2,2,1,1,2,1,3,6,1,6,6,3,1,1,5,1,1,1,3,1,2,1,2,6,2,5,2,1,4,5,1,2,2,1,4,5,1,1,6,3,5,1,3,
        3,4,1,5,1,1,3,6,1,4,6,2,3,8,4,1,2,3,1,1,1,1,4,2,2,7,2,1,2,2,2,15,4,2,2,9,5,2,5,3,1,3,1,3,2,4,13,6,4,1,5,3,1,16,8,4,4,13,8,19,8,1,15,8,1,10,1,
        3,1,7,3,10,1,1,9,2,3,3,12,5,1,14,2,1,17,7,6,6,4,4,8,16,1,2,1,1,2,1,2,2,1,2,4,1,5,2,5,1,2,2,3,2,3,2,3,1,2,2,1,1,2,1,3,8,1,1,1,1,1,6,1,1,1,1,8,
        2,3,1,1,1,3,6,3,2,1,1,1,5,4,2,1,11,1,2,1,2,1,1,1,1,1,2,1,2,7,1,2,2,7,3,1,2,1,1,1,1,2,1,1,2,5,4,10,8,5,6,1,1,1,2,2,1,1,1,4,1,2,3,2,1,1,1,1,4,
        7,4,2,2,1,7,3,2,8,19,4,1,3,13,8,2,6,2,4,1,33,15,1,1,3,2,1,6,5,2,9,1,7,3,3,2,1,2,2,7,7,35,4,25,27,3,22,29,2,1,16,5,2,2,7,1,3,1,3,1,1,1,3,3,3,
        1,1,1,3,6,1,4,1,3,6,5,4,1,2,2,1,2,8,6,2,6,3,1,1,5,3,5,7,8,1,2,4,4,3,1,8,7,1,1,2,2,1,1,1,1,1,1,9,8,6,1,1,3,2,4,6,1,4,2,8,1,1,1,6,3,1,6,1,1,9,
        3,4,3,2,1,2,1,9,7,3,1,3,5,2,3,4,2,5,2,2,1,1,2,1,3,4,7,1,2,4,4,4,2,5,10,2,4,2,9,2,4,5,2,1,4,1,1,1,1,3,1,6,2,3,3,1,1,4,2,1,2,1,1,4,1,1,5,1,1,5,
        3,7,1,1,2,2,7,2,2,4,6,2,7,1,9,1,1,1,4,3,11,6,4,7,1,2,15,1,3,2,1,1,7,3,1,4,2,1,2,5,2,4,14,3,7,3,5,4,9,1,1,1,3,1,1,1,1,1,2,1,15,5,1,4,3,1,7,
        2,4,5,1,3,3,2,10,2,1,1,2,3,1,1,8,1,5,6,4,3,2,2,3,1,1,5,10,1,2,1,2,3,1,1,5,1,7,1,5,1,6,5,1,1,3,1,3,4,13,10,1,5,3,1,3,1,1,1,7,3,2,3,2,3,1,4,1,
        3,3,2,3,3,1,5,2,4,8,4,2,1,3,6,10,3,2,2,1,6,4,8,4,5,1,1,1,3,22,3,12,3,1,1,1,2,2,3,1,8,2,2,1,1,2,1,1,3,1,4,1,4,2,1,8,4,2,2,1,1,3,7,1,1,1,6,1,1,
        2,2,1,4,1,1,4,3,8,10,1,1,4,3,3,3,2,1,1,4,5,1,7,1,1,2,1,1,1,16,3,1,5,4,4,3,1,2,3,2,2,1,1,1,2,1,1,3,2,1,1,2,1,1,1,1,1,1,16,1,1,1,2,2,1,3,5,1,1,
        1,2,6,1,1,8,5,18,2,1,4,11,3,1,4,4,3,5,1,1,5,18,1,1,2,6,1,4,1,4,5,3,1,4,1,3,3,3,4,2,1,2,5,1,1,1,2,2,1,1,1,2,20,6,3,4,2,1,2,4,4,1,6,2,6,1,3,1,
        6,25,2,4,1,2,1,5,2,12,2,1,9,4,3,1,19,1,2,4,7,8,2,6,9,1,1,13,1,8,2,1,2,5,4,6,1,4,2,1,1,1,2,2,9,1,3,2,1,2,1,2,3,1,2,1,4,2,4,2,6,1,5,1,5,4,1,1,
        2,6,1,3,2,6,9,5,4,1,3,1,6,1,6,1,1,3,7,3,2,3,1,6,3,5,2,2,5,1,1,1,4,1,4,1,3,6,6,2,1,2,1,10,1,4,9,1,6,2,3,3,2,3,1,2,4,1,3,1,7,2,3,1,4,4,6,1,2,1,
        7,1,11,3,1,2,1,3,1,4,9,8,4,1,5,2,1,4,1,11,1,5,2,1,5,2,19,1,6,3,3,11,3,7,2,2,6,1,1,4,2,4,13,1,1,8,5,1,11,6,3,3,6,5,13,3,13,3,4,3,6,6,4,2,1,1,
        3,1,1,3,2,1,1,3,5,1,2,2,7,1,2,4,2,2,7,1,1,2,1,1,1,1,3,3,1,8,9,3,5,1,1,1,5,6,2,1,14,2,1,1,2,2,2,7,1,8,2,6,1,5,2,5,1,18,2,5,2,12,11,1,1,2,1,6,
        2,9,4,3,3,2,2,1,1,5,5,20,4,10,8,1,14,1,3,1,3,2,1,2,1,2,4,4,1,2,1,34,9,2,2,2,1,13,4,6,2,3,5,1,5,2,1,3,2,15,5,2,2,5,3,2,1,2,5,1,3,4,7,4,3,4,1,
        11,8,1,4,30,26,9,1,6,4,2,8,3,2,8,2,2,9,4,14,1,6,1,10,2,5,1,6,3,4,6,10,1,1,3,3,21,11,10,4,1,8,7,2,6,5,1,2,2,18,3,1,1,3,7,3,4,13,1,6,2,1,9,21,
        4,16,8,6,10,3,4,5,3,7,1,5,11,7,1,2,8,22,9,6,12,10,1,2,15,8,3,1,9,2,3,2,2,15,2,1,1,1,1,1,1,3,8,5,1,1,2,4,4,3,3,1,12,2,12,10,1,3,3,2,3,2,3,1,5,
        1,5,2,2,3,1,1,3,4,16,4,14,13,5,1,1,2,3,5,4,4,1,2,1,1,3,3,1,3,2,4,6,2,1,1,14,5,2,6,1,1,1,1,7,2,6,2,8,3,1,3,2,2,3,4,4,2,4,3,2,16,3,3,2,5,1,2,
        1,1,1,1,2,3,1,4,1,2,7,2,2,4,6,1,1,2,3,8,1,2,24,12,4,3,7,4,1,7,1,4,5,2,1,3,24,1,12,3,1,2,2,6,3,1,15,1,1,3,2,5,2,25,1,3,3,3,4,8,1,1,1,4,1,5,1,
        6,1,1,4,3,3,4,2,1,3,3,2,2,2,2,1,1,10,20,1,1,2,3,1,2,1,1,1,3,3,1,2,3,2,4,2,4,5,7,3,7,2,2,3,12,7,1,26,7,6,2,4,1,5,3,5,5,7,4,2,6,2,1,2,4,1,5,2,
        1,24,3,3,2,10,1,2,1,4,9,4,1,1,11,2,1,6,1,1,1,5,1,1,5,6,1,18,3,4,3,9,2,7,1,2,8,2,2,4,4,2,2,6,9,10,3,3,10,2,6,7,1,1,1,21,3,4,1,1,3,7,1,3,2,9,4,
        8,3,2,4,2,4,5,1,2,2,9,8,14,14,5,7,11,8,5,6,2,4,1,13,4,4,3,4,18,1,1,1,1,4,5,2,14,2,5,9,1,6,5,21,4,12,1,15,1,7,5,10,6,19,3,2,11,3,2,6,1,1,1,
        1,1,3,2,15,7,6,10,5,6,9,4,5,8,5,5,1,4,1,5,2,2,3,4,3,3,6,1,1,5,1,1,6,7,11,7,3,11,13,2,2,1,3,2,3,1,2,1,1,1,2,1,2,6,1,1,4,6,4,2,1,2,2,2,1,1,1,5,
        2,6,3,2,5,4,3,1,3,14,4,5,7,5,5,3,17,2,2,10,2,7,2,7,1,8,14,1,1,3,1,25,3,2,1,9,4,11,2,1,7,1,5,1,9,2,7,17,8,2,3,2,1,2,1,5,4,3,2,2,11,9,10,2,7,1,
        4,4,5,10,3,19,13,1,16,5,2,1,3,1,24,3,1,2,2,9,1,2,4,5,2,20,4,1,1,1,2,1,4,1,5,1,5,1,19,8,17,7,3,1,9,13,13,5,13,4,2,1,3,16,1,13,8,9,3,2,2,3,3,3,
        1,2,1,2,1,1,3,1,1,1,4,1,20,3,5,5,1,2,1,5,3,1,1,3,1,5,6,2,14,1,3,1,3,1,2,8,1,3,7,1,6,7,1,2,4,3,1,1,7,2,3,10,1,3,1,2,3,4,1,13,1,2,1,6,5,1,1,8,
        2,2,3,3,12,1,1,3,3,2,11,4,10,4,6,6,4,2,9,1,3,4,3,2,3,1,6,3,1,1,1,4,2,2,1,1,6,5,3,4,20,2,4,6,5,3,1,3,2,2,3,1,4,2,7,1,2,1,2,2,1,1,2,3,4,1,3,2,
        4,1,3,2,3,8,2,20,1,8,1,13,1,1,2,2,2,2,15,12,1,2,3,2,2,1,2,3,1,13,4,1,1,5,3,5,2,3,13,1,1,5,2,3,2,1,3,3,8,2,2,8,12,4,3,1,1,6,1,2,4,4,1,1,4,10,
        5,10,1,7,9,8,2,6,3,2,2,4,11,26,14,1,3,13,13,3,2,3,6,1,7,8,2,7,3,7,2,2,3,4,5,1,5,5,5,14,4,3,5,3,3,7,13,11,13,4,1,1,14,4,2,1,5,1,1,1,7,5,1,1,3,
        3,1,1,1,5,3,5,13,5,2,12,1,1,23,1,3,4,3,9,3,1,1,1,1,8,2,6,1,13,4,1,2,1,2,18,5,5,3,3,2,1,6,6,2,3,1,14,3,6,4,1,1,2,1,7,5,1,1,9,10,1,7,2,9,2,3,
        1,5,2,3,4,10,3,1,1,1,7,1,9,1,4,1,11,10,1,2,1,2,1,14,6,1,3,2,8,2,7,3,1,3,2,7,11,8,2,3,2,6,2,4,26,3,2,2,2,1,2,2,2,10,21,2,20,4,5,1,2,6,4,12,4,
        3,12,1,3,2,1,2,16,8,3,5,14,7,9,6,17,3,2,4,3,1,12,1,5,1,1,4,9,1,18,1,4,8,2,4,1,22,9,3,2,8,6,12,2,2,5,3,1,11,1,11,1,3,3,2,1,1,2,5,8,12,3,2,2,
        2,1,2,2,1,1,2,3,4,1,2,2,1,1,1,4,1,1,9,3,1,1,3,6,3,4,2,1,1,2,10,5,9,3,1,4,2,6,3,1,7,8,8,6,2,2,9,2,2,2,9,2,3,1,1,2,1,3,2,1,2,1,1,8,3,8,6,2,3,1,
        2,3,5,1,3,3,5,7,13,9,4,6,8,8,3,3,1,5,6,1,3,2,2,1,14,1,5,4,3,8,1,1,2,6,6,3,1,5,10,3,4,3,6,154,2,2,3,7,4,8,4,1,10,10,1,4,2,2,3,2,2,12,3,2,2,2,
        6,6,4,5,1,4,1,6,3,4,2,1,4,2,2,4,7,2,4,2,1,10,1,1,8,7,1,2,6,1,1,1,4,1,2,2,1,6,1,3,2,3,2,1,1,3,23,3,7,2,7,4,12,2,2,4,17,1,1,1,1,3,1,6,1,1,5,1,
        1,1,2,2,1,7,3,2,2,1,2,4,1,3,4,1,1,4,2,1,2,6,9,9,2,8,4,1,3,3,3,1,8,3,1,2,1,4,5,5,3,1,2,2,12,13,6,2,4,2,8,5,8,5,3,2,1,3,1,16,1,5,3,2,1,2,5,1,1,
        5,1,8,2,5,11,1,1,1,3,8,1,10,7,3,1,1,1,2,1,3,3,4,2,9,2,5,4,2,2,1,2,3,6,1,6,1,1,2,2,2,3,2,1,1,1,2,1,3,2,2,7,1,2,1,3,6,2,1,1,9,1,1,2,14,17,1,
        13,8,1,2,1,4,8,13,2,5,7,4,2,6,7,1,4,2,6,2,2,20,1,1,1,3,4,3,1,4,2,1,1,10,16,1,1,1,1,4,14,20,6,1,2,1,1,2,1,7,3,6,1,5,1,2,2,35,1,3,1,13,1,4,4,
        1,3,2,6,2,2,9,18,4,4,5,2,16,4,9,6,1,1,1,2,4,5,6,1,6,1,1,1,1,30,5,4,3,4,1,12,14,4,6,2,3,3,2,1,5,4,2,11,14,9,3,2,20,6,4,3,1,4,2,3,2,6,2,25,2,
        35,2,1,3,3,7,2,9,1,16,6,6,1,15,15,1,1,3,17,6,3,10,3,8,10,3,1,5,1,6,19,4,2,6,8,7,1,4,1,15,1,1,11,1,3,1,6,9,19,11,7,15,2,4,1,6,1,2,1,8,4,4,2,8,
        17,2,7,16,1,5,1,5,2,5,10,6,1,4,9,5,2,4,5,9,12,2,3,2,2,1,4,1,11,2,3,2,2,6,3,15,7,4,13,9,2,2,7,6,2,12,2,2,10,1,10,17,1,3,9,8,7,1,5,6,2,3,6,1,
        26,3,3,9,10,8,2,5,1,10,2,1,1,14,5,3,2,5,12,1,6,4,2,2,2,4,1,1,5,3,5,7,10,1,6,3,2,5,4,8,13,6,16,1,8,5,5,1,3,1,3,1,2,2,7,11,1,4,1,4,5,5,9,2,1,7,
        5,6,5,1,7,6,3,8,1,18,9,1,4,6,5,3,13,2,2,3,5,4,4,3,16,4,2,6,8,3,3,18,17,17,4,8,2,1,5,2,2,2,1,4,2,1,1,1,3,2,2,4,2,5,3,4,3,6,1,6,5,10,4,1,6,3,
        2,2,1,3,3,2,1,1,1,2,1,1,1,6,3,9,2,5,1,4,2,2,3,6,2,1,2,1,1,1,2,2,2,4,2,10,3,3,2,3,2,2,2,5,4,6,10,1,4,2,1,3,6,1,2,4,2,1,1,2,6,4,9,2,2,2,3,8,4,
        13,8,8,3,2,1,9,2,2,10,6,3,1,4,3,6,3,10,8,1,3,4,157,8,2,5,2,1,3,2,2,4,1,5,7,1,8,1,1,13,1,8,7,3,1,6,10,1,2,1,1,5,1,1,1,1,1,3,3,1,1,2,1,1,3,1,
        1,2,1,1,1,1,1,1,2,1,2,7,1,1,9,2,2,2,1,1,2,4,2,1,7,6,2,1,8,3,2,1,2,2,4,3,5,73,2,1,4,2,3,3,1,3,10,4,5,11,4,6,4,5,11,1,10,8,5,1,2,3,9,1,2,2,2,
        7,2,5,4,7,2,19,1,13,2,3,7,1,1,6,3,1,4,9,2,4,1,1,1,14,6,4,1,2,6,6,4,4,2,5,1,3,2,2,1,3,4,16,9,1,1,1,5,8,6,10,1,1,1,5,2,7,4,25,3,1,2,5,6,1,8,1,
        1,1,6,1,1,2,7,3,1,3,2,9,3,3,1,3,2,1,4,4,1,6,11,2,58,1,3,4,3,2,5,1,1,1,1,1,16,2,1,9,3,3,14,2,1,1,4,1,2,3,4,3,1,1,1,3,3,1,2,2,1,7,2,1,4,1,1,1,
        2,1,1,2,1,1,1,2,1,11,3,1,3,3,4,2,3,1,5,3,1,2,1,1,1,1,2,1,1,3,1,3,2,2,3,5,1,4,1,4,2,1,2,1,2,2,1,2,1,1,1,2,3,3,5,1,1,4,13,1,3,2,2,7,4,3,9,9,4,
        19,7,5,8,8,5,7,9,7,14,6,3,1,24,1,1,1,1,5,5,12,2,4,1,2,9,2,1,11,4,2,2,7,10,2,5,8,1,14,6,1,6,2,2,1,1,1,1,1,1,6,1,4,1,6,3,1,14,20,4,1,2,4,1,9,
        5,17,3,1,6,2,11,6,6,4,7,2,28,5,14,3,2,4,16,7,4,2,2,1,5,4,13,18,6,3,11,4,8,12,8,2,6,2,4,2,3,4,4,3,20,1,2,14,10,7,9,9,4,8,10,2,12,12,5,16,5,9,
        5,1,1,4,3,2,1,27,6,21,22,4,1,2,3,2,10,13,1,14,3,13,2,10,1,1,1,248,9,2,1,6,2,4,2,1,1,1,4,9,2,1,1,3,1,4,4,1,9,11,2,2,1,1,4,4,2,6,5,1,58,5,9,4,
        3,1,9,4,1,4,7,1,1,3,11,1,5,1,1,1,6,6,2,1,2,1,1,1,5,8,1,4,1,2,1,6,1,3,1,2,1,11,1,2,7,3,4,3,5,1,3,1,1,1,2,2,1,1,8,1,3,2,1,2,4,1,5,2,5,3,4,1,2,
        2,5,4,2,1,2,4,1,1,2,2,3,6,2,9,3,8,6,1,4,1,4,2,4,10,4,5,1,2,2,1,1,4,2,1,4,7,2,6,9,6,2,2,9,8,3,3,7,20,2,3,5,1,7,9,17,6,2,1,5,4,2,1,1,2,1,2,4,
        4,1,1,1,4,1,9,3,9,3,7,1,1,2,11,6,1,1,1,9,3,3,9,4,4,1,1,55,7,2,2,3,4,2,8,23,4,3,5,2,1,3,2,3,2,8,1,1,5,2,4,1,2,4,2,1,5,3,3,3,7,13,8,1,1,6,12,
        1,10,2,56,3,12,3,4,1,1,3,2,1,13,15,1,1,3,4,2,2,2,3,11,4,14,2,13,8,3,18,5,7,7,2,3,2,16,2,3,1,4,3,3,5,62,7,1,7,1,4,19,3,1,1,4,14,7,1,1,12,8,3,
        7,13,8,3,2,1,9,11,5,1,2,1,10,5,4,2,21,8,26,26,3,27,1,30,21,16,6,18,8,4,10,3,22,2,1,32,1,109,4,10,1,2,16,3,12,6,8,3,2,19,4,18,12,3,1,9,2,6,
        23,38,5,14,17,4,14,20,1,32,4,87,4,3,1,2,12,7,1,4,6,2,6,4,1,10,7,1,1,1,5,10,1,1,2,3,4,3,1,1,1,2,8,7,5,3,16,1,6,5,2,4,7,12,8,7,3,12,1,7,13,2,
        2,3,4,2,6,5,22,3,4,8,
    };
    static ImWchar base_ranges[] = // not zero-terminated
    {
        0x0020, 0x00FF, // Basic Latin + Latin Supplement
        0x2000, 0x206F, // General Punctuation
        0x3000, 0x30FF, // CJK Symbols and Punctuations, Hiragana, Katakana
        0x31F0, 0x31FF, // Katakana Phonetic Extensions
        0xFF00, 0xFFEF  // Half-width characters
    };
    static ImWchar full_ranges[IM_ARRAYSIZE(base_ranges) + IM_ARRAYSIZE(accumulative_offsets_from_0x4E00) * 2 + 1] = { 0 };
    if (!full_ranges[0])
    {
        memcpy(full_ranges, base_ranges, sizeof(base_ranges));
        UnpackAccumulativeOffsetsIntoRanges(0x4E00, accumulative_offsets_from_0x4E00, IM_ARRAYSIZE(accumulative_offsets_from_0x4E00), full_ranges + IM_ARRAYSIZE(base_ranges));
    }
    return &full_ranges[0];
}

// Helper to display a little (?) mark which shows a tooltip when hovered.
void ShowHelpMarker(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

template<bool PerGameOption>
bool OptionCheckbox(const char *name, config::Option<bool, PerGameOption>& option, const char *help)
{
	bool b = option;
	if (option.isReadOnly())
	{
        ImGui::PushItemFlag(ImGuiItemFlags_Disabled, true);
        ImGui::PushStyleVar(ImGuiStyleVar_Alpha, ImGui::GetStyle().Alpha * 0.5f);
	}
	bool pressed = ImGui::Checkbox(name, &b);
	if (option.isReadOnly())
	{
        ImGui::PopItemFlag();
        ImGui::PopStyleVar();
	}
	if (pressed)
		option.set(b);
	if (help != nullptr)
	{
		ImGui::SameLine();
		ShowHelpMarker(help);
	}
	return pressed;
}
template bool OptionCheckbox(const char *name, config::Option<bool, true>& option, const char *help);
template bool OptionCheckbox(const char *name, config::Option<bool, false>& option, const char *help);

bool OptionSlider(const char *name, config::Option<int>& option, int min, int max, const char *help)
{
	int v = option;
	if (option.isReadOnly())
	{
        ImGui::PushItemFlag(ImGuiItemFlags_Disabled, true);
        ImGui::PushStyleVar(ImGuiStyleVar_Alpha, ImGui::GetStyle().Alpha * 0.5f);
	}
	bool valueChanged = ImGui::SliderInt(name, &v, min, max);
	if (option.isReadOnly())
	{
        ImGui::PopItemFlag();
        ImGui::PopStyleVar();
	}
	else if (valueChanged)
		option.set(v);
	if (help != nullptr)
	{
		ImGui::SameLine();
		ShowHelpMarker(help);
	}
	return valueChanged;
}

template<typename T>
bool OptionRadioButton(const char *name, config::Option<T>& option, T value, const char *help)
{
	int v = (int)option;
	if (option.isReadOnly())
	{
        ImGui::PushItemFlag(ImGuiItemFlags_Disabled, true);
        ImGui::PushStyleVar(ImGuiStyleVar_Alpha, ImGui::GetStyle().Alpha * 0.5f);
	}
	bool pressed = ImGui::RadioButton(name, &v, (int)value);
	if (option.isReadOnly())
	{
        ImGui::PopItemFlag();
        ImGui::PopStyleVar();
	}
	if (pressed)
		option.set((T)v);
	if (help != nullptr)
	{
		ImGui::SameLine();
		ShowHelpMarker(help);
	}
	return pressed;
}
template bool OptionRadioButton<bool>(const char *name, config::Option<bool>& option, bool value, const char *help);
template bool OptionRadioButton<int>(const char *name, config::Option<int>& option, int value, const char *help);

void OptionComboBox(const char *name, config::Option<int>& option, const char *values[], int count,
			const char *help)
{
	if (option.isReadOnly())
	{
        ImGui::PushItemFlag(ImGuiItemFlags_Disabled, true);
        ImGui::PushStyleVar(ImGuiStyleVar_Alpha, ImGui::GetStyle().Alpha * 0.5f);
	}
	if (ImGui::BeginCombo(name, values[option], ImGuiComboFlags_None))
	{
		for (int i = 0; i < count; i++)
		{
			bool is_selected = option == i;
			if (ImGui::Selectable(values[i], &is_selected))
				option = i;
            if (is_selected)
                ImGui::SetItemDefaultFocus();
		}
		ImGui::EndCombo();
	}
	if (option.isReadOnly())
	{
        ImGui::PopItemFlag();
        ImGui::PopStyleVar();
	}
	if (help != nullptr)
	{
		ImGui::SameLine();
		ShowHelpMarker(help);
	}
}
